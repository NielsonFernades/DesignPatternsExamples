1- Padrões de Criação (Creational)
     Abstract Factory - Um método Factory é um método que fabrica objetos de um tipo particular; Um objeto Factory é um objeto que encapsula                                métodos Factory.
     Builder - Separa a construção de um objeto complexo da sua representação, de forma que o mesmo processo de construção possa criar diferentes representações.
     Factory Method - É uma interface para instanciação de objetos que mantém isoladas as classes concretas usadas da requisição da criação destes objetos.
     Prototype - O padrão Prototype fornece uma outra maneira de se construir objetos de tipos arbitrários.
     Singleton. - Garante que para uma classe específica só possa existir uma única instância, a qual é acessível de forma global e uniforme.
2- Padrões de Estrutura (Structural)
     Adapter - Permite que dois objetos se comuniquem mesmo que tenham interfaces incompatíveis.
     Bridge - Desacopla a interface da implementação ; Ocultação de detalhes de implementação dos clientes.
     Composite - lida com uma estrutura de elementos agrupada hierarquicamente (não como meras coleções).
     Decorator - Atribui responsabilidade adicionais a um objeto dinamicamente. O Decorator fornece uma alternativa flexível a subclasses para a extensão da funcionalidade.
     Facade - Interface unificada para um subsistema ; Torna o subsistema mais fácil de usar.
     Flyweight - Usa compartilhamento para dar suporte a vários objetos de forma eficiente.
     Proxy - Fornece um objeto representante ou procurador de outro objeto para controlar o acesso ao mesmo.
3- Padrões de Comportamento (Behavioral)
    Chain of Responsability - Evita dependência do remetente(cliente) de uma requisição ao seu destinatário , dando a oportunidade de mais de objeto tratar a requisição.
    Command - Associa uma ação a diferentes objetos através de uma interface conhecida.
    Interpreter - Usado para ajudar uma aplicação a entender uma declaração de linguagem natural e executar a funcionalidade da declaração.
    Iterator - Provê uma forma de percorrermos os elementos de uma coleção sem violar o seu encapsulamento.
    Mediator - Cria um objeto que age como um  mediador controlando a interação entre um conjunto de objetos.
    Memento - Torna possível salvar o estado de um objeto de modo que o mesmo possa ser restaurado.
    Observer - Define uma relação de dependência 1:N de forma que quando um certo objeto (assunto) tem seu estado modificado os demais (observadores) são notificados; Possibilita baixo acoplamento entre os objetos observadores e o assunto.
    State - Permite objeto alterar seu comportamento quando estado interno muda.
    Strategy - Permite que uma família de algoritmos seja utilizada de modo independente e seletivo.
    Template Method -Define o esqueleto de um algoritmo em uma operação adiando a definição de alguns passos para a subclasse.
    Visitor - Define operações independentes a serem realizadas sobre elementos de uma estrutura.